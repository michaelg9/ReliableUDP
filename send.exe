{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "# Introductory applied machine learning (INFR10069)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Assignment 1: Data analysis and visualisation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Marking Breakdown\n",
    "\n",
    "**70-100%** results/answer correct plus extra achievement at understanding or analysis of results. Clear explanations, evidence of creative or deeper thought will contribute to a higher grade.\n",
    "\n",
    "**60-69%** results/answer correct or nearly correct and well explained.\n",
    "\n",
    "**50-59%** results/answer in right direction but significant errors.\n",
    "\n",
    "**40-49%** some evidence that the student has gained some understanding, but not answered the questions\n",
    "properly.\n",
    "\n",
    "**0-39%** serious error or slack work."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Mechanics\n",
    "\n",
    "Fill out this notebook, save it, and **submit it electronically as described below.**\n",
    "\n",
    "On a DICE environment, open the terminal, navigate to the location of this notebook, and submit this notebook file using the following command:\n",
    "\n",
    "`submit iaml cw1 03_Assignment_1.ipynb`\n",
    "\n",
    "What actually happens in the background is that your file is placed in a folder available to markers. If you submit a file with the same name into the same location, **it will *overwrite* your previous submission**. You can check the status of your submissions with the `show_submissions` command.\n",
    "\n",
    "**Distance Learners:** To copy your work up to DICE (such that you can use the `submit` command) you can use `scp` or `rsync` (you may need to install these yourself). You can copy files up using `student.ssh.inf.ed.ac.uk`, then ssh in to submit, e.g. (in a unix terminal):\n",
    "```\n",
    "filename=03_Assignment_1.ipynb\n",
    "local_scp_filepath=~/git/iaml2017/${filename}\n",
    "UUN=s0816700\n",
    "server_address=student.ssh.inf.ed.ac.uk\n",
    "scp -r ${local_scp_filepath} ${UUN}@${server_address}:${filename}\n",
    "# rsync -rl ${local_scp_filepath} ${UUN}@${server_address}:${filename}\n",
    "ssh ${UUN}@${server_address}\n",
    "ssh student.login\n",
    "submit iaml cw1 03_Assignment_1.ipynb\n",
    "```\n",
    "\n",
    "**Late submissions:** The policy stated in the School of Informatics MSc Degree Guide is that normally you will not be allowed to submit coursework late. See http://www.inf.ed.ac.uk/teaching/years/msc/courseguide10.html#exam for exceptions to this, e.g. in case of serious medical illness or serious personal problems.\n",
    "\n",
    "**Collaboration:** You may discuss the assignment with your colleagues, provided that the writing that you submit is entirely your own. That is, you should NOT borrow actual text or code from other students. We ask that you provide a list of the people who you've had discussions with (if any).\n",
    "\n",
    "**Resubmission:** If you submit your file again, the previous submission is **overwritten**. We will mark the version that is in the submission folder at the deadline."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Important Instructions\n",
    "\n",
    "1. You *MUST* have your environment set up as in the [README](https://github.com/JamesOwers/iaml2017) and you *must activate this environment before running this notebook*:\n",
    "```\n",
    "source activate iaml\n",
    "cd iaml_2017\n",
    "jupyter notebook\n",
    "# Navigate to this file\n",
    "```\n",
    "\n",
    "1. Wherever you are required to produce code you should use code cells, otherwise you should use markdown cells to report results and explain answers.\n",
    "\n",
    "1. The .csv files that you will be using are located at `./datasets` (the `datasets` directory is adjacent to this file).\n",
    "\n",
    "1. **IMPORTANT:** Keep your answers brief and concise. Most written questions can be answered with 2-3 lines of explanation."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Imports\n",
    "\n",
    "Execute the cell below to import all packages you will be using in the rest of the assignemnt."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from __future__ import print_function, division\n",
    "import os\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import sklearn as sklearn\n",
    "import seaborn as sns\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Description of the dataset\n",
    "\n",
    "This assignment is based on the 20 Newsgroups Dataset. This dataset is a collection of approximately 20,000 newsgroup documents, partitioned (nearly) evenly across 20 different newsgroups, each corresponding to a different topic. Some of the newsgroups are very closely related to each other (e.g. comp.sys.ibm.pc.hardware, comp.sys.mac.hardware), while others are highly unrelated (e.g misc.forsale, soc.religion.christian). \n",
    "\n",
    "There are three versions of the 20 Newsgroups Dataset. In this assignment we will use the `bydate` matlab version in which documents are sorted by date into training (60%) and test (40%) sets, newsgroup-identifying headers are dropped and duplicates are removed. This collection comprises roughly 61,000 different words, which results in a bag-of-words representation with frequency counts. More specifically, each document is represented by a 61,000 dimensional vector that contains the counts for each of the 61,000 different words present in the respective document. \n",
    "\n",
    "To save you time and to make the problem manageable with limited computational resources, we preprocessed the original dataset. We will use documents from only 5 out of the 20 newsgroups, which results in a 5-class problem. More specifically the 5 classes correspond to the following newsgroups: \n",
    "1. `alt.atheism`\n",
    "2. `comp.sys.ibm.pc.hardware`\n",
    "3. `comp.sys.mac.hardware`\n",
    "4. `rec.sport.baseball`\n",
    "5. `rec.sport.hockey `\n",
    "\n",
    "However, note here that classes 2-3 and 4-5 are rather closely related. Additionally, we computed the [mutual information](https://en.wikipedia.org/wiki/Mutual_information) of each word with the class attribute and selected the 520 words out of 61,000 that had highest mutual information. Therefore, our dataset is a $N \\times 520$ dimensional matrix, where $N$ is the number of documents. For very sophisticated technical reasons 1 was added to all the word counts in part A. The resulting representation is much more compact and can be used directly to perform our experiments in Python."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Exploration of the dataset [40%]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Your first task is to get a feel for the data that you will be dealing with in the rest of the assignment."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ========== Question 1.1 --- [5 marks] ==========\n",
    "Load the datasets `train_20news_partA.csv` and `train_20news_partB.csv` into two separate pandas DataFrames."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Your code goes here\n",
    "data_path = os.path.join(os.getcwd(), 'datasets', 'train_20news_partA.csv')\n",
    "datasetA = pd.read_csv(data_path, delimiter = ',')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "data_path = os.path.join(os.getcwd(), 'datasets', 'train_20news_partB.csv')\n",
    "datasetB = pd.read_csv(data_path, delimiter = ',')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "### ========== Question 1.2 --- [3 marks] ==========\n",
    "Display basic information for dataset A such as number of columns, type, and memory usage (*hint: pandas dataframes have a built in method for this*) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 2129 entries, 0 to 2256\n",
      "Columns: 521 entries, w1_aaa to class\n",
      "dtypes: int64(521)\n",
      "memory usage: 8.5 MB\n"
     ]
    }
   ],
   "source": [
    "datasetA.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ========== Question 1.3 --- [3 marks] ==========\n",
    "How many data points and how many attributes are there in the dataset that we can use to model the target variable `class`?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2129, 521)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datasetA.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are 2129 data points, i.e. number of documents and 520 attributes that are used to represent each data point (the last column is not a feature but a label of the class) in the training set (datasetA)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "### ========== Question 1.4 --- [3 marks] ==========\n",
    "Use a Pandas method to display the summary statistics for the `news_A` DataFrame."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>w1_aaa</th>\n",
       "      <th>w2_pins</th>\n",
       "      <th>w3_kmr</th>\n",
       "      <th>w4_notion</th>\n",
       "      <th>w5_queens</th>\n",
       "      <th>w6_dwyer</th>\n",
       "      <th>w7_defenseman</th>\n",
       "      <th>w8_gld</th>\n",
       "      <th>w9_tocchet</th>\n",
       "      <th>w10_home</th>\n",
       "      <th>...</th>\n",
       "      <th>w512_constantly</th>\n",
       "      <th>w513_generate</th>\n",
       "      <th>w514_definite</th>\n",
       "      <th>w515_lacks</th>\n",
       "      <th>w516_combination</th>\n",
       "      <th>w517_sitting</th>\n",
       "      <th>w518_surface</th>\n",
       "      <th>w519_fashion</th>\n",
       "      <th>w520_sit</th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2129.000000</td>\n",
       "      <td>2129.000000</td>\n",
       "      <td>2129.000000</td>\n",
       "      <td>2129.000000</td>\n",
       "      <td>2129.000000</td>\n",
       "      <td>2129.00000</td>\n",
       "      <td>2129.000000</td>\n",
       "      <td>2129.000000</td>\n",
       "      <td>2129.000000</td>\n",
       "      <td>2129.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>2129.000000</td>\n",
       "      <td>2129.000000</td>\n",
       "      <td>2129.000000</td>\n",
       "      <td>2129.000000</td>\n",
       "      <td>2129.000000</td>\n",
       "      <td>2129.000000</td>\n",
       "      <td>2129.000000</td>\n",
       "      <td>2129.000000</td>\n",
       "      <td>2129.000000</td>\n",
       "      <td>2129.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>5.128229</td>\n",
       "      <td>6.097698</td>\n",
       "      <td>6.120244</td>\n",
       "      <td>5.551902</td>\n",
       "      <td>5.521841</td>\n",
       "      <td>6.12776</td>\n",
       "      <td>5.633161</td>\n",
       "      <td>6.090653</td>\n",
       "      <td>5.970409</td>\n",
       "      <td>5.624706</td>\n",
       "      <td>...</td>\n",
       "      <td>9.666510</td>\n",
       "      <td>9.217473</td>\n",
       "      <td>9.061531</td>\n",
       "      <td>9.398309</td>\n",
       "      <td>9.175200</td>\n",
       "      <td>9.708783</td>\n",
       "      <td>8.807891</td>\n",
       "      <td>9.719587</td>\n",
       "      <td>9.307656</td>\n",
       "      <td>3.092532</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>38.292577</td>\n",
       "      <td>46.190953</td>\n",
       "      <td>46.656022</td>\n",
       "      <td>40.953913</td>\n",
       "      <td>40.978098</td>\n",
       "      <td>45.96434</td>\n",
       "      <td>41.146918</td>\n",
       "      <td>45.762060</td>\n",
       "      <td>44.266628</td>\n",
       "      <td>40.769105</td>\n",
       "      <td>...</td>\n",
       "      <td>45.844064</td>\n",
       "      <td>43.948910</td>\n",
       "      <td>40.969185</td>\n",
       "      <td>43.833064</td>\n",
       "      <td>42.403283</td>\n",
       "      <td>47.294120</td>\n",
       "      <td>39.341038</td>\n",
       "      <td>46.185082</td>\n",
       "      <td>45.059367</td>\n",
       "      <td>1.395948</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>572.000000</td>\n",
       "      <td>583.000000</td>\n",
       "      <td>579.000000</td>\n",
       "      <td>580.000000</td>\n",
       "      <td>591.000000</td>\n",
       "      <td>600.00000</td>\n",
       "      <td>546.000000</td>\n",
       "      <td>591.000000</td>\n",
       "      <td>578.000000</td>\n",
       "      <td>578.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>590.000000</td>\n",
       "      <td>587.000000</td>\n",
       "      <td>577.000000</td>\n",
       "      <td>598.000000</td>\n",
       "      <td>568.000000</td>\n",
       "      <td>599.000000</td>\n",
       "      <td>585.000000</td>\n",
       "      <td>600.000000</td>\n",
       "      <td>597.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 521 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            w1_aaa      w2_pins       w3_kmr    w4_notion    w5_queens  \\\n",
       "count  2129.000000  2129.000000  2129.000000  2129.000000  2129.000000   \n",
       "mean      5.128229     6.097698     6.120244     5.551902     5.521841   \n",
       "std      38.292577    46.190953    46.656022    40.953913    40.978098   \n",
       "min       1.000000     1.000000     1.000000     1.000000     1.000000   \n",
       "25%       1.000000     1.000000     1.000000     1.000000     1.000000   \n",
       "50%       1.000000     1.000000     1.000000     1.000000     1.000000   \n",
       "75%       1.000000     1.000000     1.000000     1.000000     1.000000   \n",
       "max     572.000000   583.000000   579.000000   580.000000   591.000000   \n",
       "\n",
       "         w6_dwyer  w7_defenseman       w8_gld   w9_tocchet     w10_home  \\\n",
       "count  2129.00000    2129.000000  2129.000000  2129.000000  2129.000000   \n",
       "mean      6.12776       5.633161     6.090653     5.970409     5.624706   \n",
       "std      45.96434      41.146918    45.762060    44.266628    40.769105   \n",
       "min       1.00000       1.000000     1.000000     1.000000     1.000000   \n",
       "25%       1.00000       1.000000     1.000000     1.000000     1.000000   \n",
       "50%       1.00000       1.000000     1.000000     1.000000     1.000000   \n",
       "75%       1.00000       1.000000     1.000000     1.000000     1.000000   \n",
       "max     600.00000     546.000000   591.000000   578.000000   578.000000   \n",
       "\n",
       "          ...       w512_constantly  w513_generate  w514_definite  \\\n",
       "count     ...           2129.000000    2129.000000    2129.000000   \n",
       "mean      ...              9.666510       9.217473       9.061531   \n",
       "std       ...             45.844064      43.948910      40.969185   \n",
       "min       ...              1.000000       1.000000       1.000000   \n",
       "25%       ...              3.000000       2.000000       3.000000   \n",
       "50%       ...              5.000000       5.000000       5.000000   \n",
       "75%       ...              7.000000       7.000000       7.000000   \n",
       "max       ...            590.000000     587.000000     577.000000   \n",
       "\n",
       "        w515_lacks  w516_combination  w517_sitting  w518_surface  \\\n",
       "count  2129.000000       2129.000000   2129.000000   2129.000000   \n",
       "mean      9.398309          9.175200      9.708783      8.807891   \n",
       "std      43.833064         42.403283     47.294120     39.341038   \n",
       "min       1.000000          1.000000      1.000000      1.000000   \n",
       "25%       3.000000          2.000000      3.000000      3.000000   \n",
       "50%       5.000000          5.000000      5.000000      5.000000   \n",
       "75%       7.000000          7.000000      7.000000      7.000000   \n",
       "max     598.000000        568.000000    599.000000    585.000000   \n",
       "\n",
       "       w519_fashion     w520_sit        class  \n",
       "count   2129.000000  2129.000000  2129.000000  \n",
       "mean       9.719587     9.307656     3.092532  \n",
       "std       46.185082    45.059367     1.395948  \n",
       "min        1.000000     1.000000     1.000000  \n",
       "25%        3.000000     2.000000     2.000000  \n",
       "50%        5.000000     4.000000     3.000000  \n",
       "75%        7.000000     6.000000     4.000000  \n",
       "max      600.000000   597.000000     5.000000  \n",
       "\n",
       "[8 rows x 521 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datasetA.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "### ========== Question 1.5 --- [3 marks] ==========\n",
    "Display the first 7 instances of dataset A."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>w1_aaa</th>\n",
       "      <th>w2_pins</th>\n",
       "      <th>w3_kmr</th>\n",
       "      <th>w4_notion</th>\n",
       "      <th>w5_queens</th>\n",
       "      <th>w6_dwyer</th>\n",
       "      <th>w7_defenseman</th>\n",
       "      <th>w8_gld</th>\n",
       "      <th>w9_tocchet</th>\n",
       "      <th>w10_home</th>\n",
       "      <th>...</th>\n",
       "      <th>w512_constantly</th>\n",
       "      <th>w513_generate</th>\n",
       "      <th>w514_definite</th>\n",
       "      <th>w515_lacks</th>\n",
       "      <th>w516_combination</th>\n",
       "      <th>w517_sitting</th>\n",
       "      <th>w518_surface</th>\n",
       "      <th>w519_fashion</th>\n",
       "      <th>w520_sit</th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7 rows × 521 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   w1_aaa  w2_pins  w3_kmr  w4_notion  w5_queens  w6_dwyer  w7_defenseman  \\\n",
       "0       1        1       1          1          1         1              1   \n",
       "1       1        1       1          1          1         1              1   \n",
       "2       1        1       1          1          1         1              1   \n",
       "3       1        1       1          1          1         1              1   \n",
       "4       1        1       1          1          1         1              1   \n",
       "5       1        1       1          1          1         1              1   \n",
       "6       1        1       1          1          2         1              1   \n",
       "\n",
       "   w8_gld  w9_tocchet  w10_home  ...    w512_constantly  w513_generate  \\\n",
       "0       1           1         1  ...                  1              5   \n",
       "1       1           1         1  ...                  2              3   \n",
       "2       1           1         2  ...                  4              2   \n",
       "3       1           1         1  ...                  6              3   \n",
       "4       1           1         1  ...                  6              1   \n",
       "5       1           1         1  ...                  7              5   \n",
       "6       1           1         1  ...                  3              6   \n",
       "\n",
       "   w514_definite  w515_lacks  w516_combination  w517_sitting  w518_surface  \\\n",
       "0              3           6                 8             4             6   \n",
       "1              6           8                 3             4             5   \n",
       "2              6           5                 2             5             5   \n",
       "3              6           1                 1             8             1   \n",
       "4              7           8                 6             3             1   \n",
       "5              4           5                 5             7             7   \n",
       "6              8           8                 3             5             2   \n",
       "\n",
       "   w519_fashion  w520_sit  class  \n",
       "0             4         8      4  \n",
       "1             6         5      4  \n",
       "2             7         8      2  \n",
       "3             8         4      3  \n",
       "4             8         4      3  \n",
       "5             7         2      2  \n",
       "6             1         2      1  \n",
       "\n",
       "[7 rows x 521 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datasetA.head(7)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ========== Question 1.6 --- [5 marks] ==========\n",
    "Display the names of the first 100 attributes in dataset A. \n",
    "\n",
    "You might observe that each attribute consists of two parts:\n",
    "1. `w<x>_` (where x is an index corresponding to each word)\n",
    "2. the actual name of the word"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index([u'w1_aaa', u'w2_pins', u'w3_kmr', u'w4_notion', u'w5_queens',\n",
       "       u'w6_dwyer', u'w7_defenseman', u'w8_gld', u'w9_tocchet', u'w10_home',\n",
       "       u'w11_buying', u'w12_internet', u'w13_slots', u'w14_compatible',\n",
       "       u'w15_transfer', u'w16_baltimore', u'w17_mean', u'w18_person',\n",
       "       u'w19_performance', u'w20_support', u'w21_tor', u'w22_gm', u'w23_mouse',\n",
       "       u'w24_base', u'w25_population', u'w26_bob', u'w27_set', u'w28_it',\n",
       "       u'w29_earth', u'w30_faith', u'w31_steve', u'w32_caps', u'w33_printer',\n",
       "       u'w34_east', u'w35_cable', u'w36_adapter', u'w37_mss', u'w38_catcher',\n",
       "       u'w39_bullpen', u'w40_obp', u'w41_innocent', u'w42_european',\n",
       "       u'w43_angeles', u'w44_settings', u'w45_words', u'w46_rit', u'w47_shots',\n",
       "       u'w48_ports', u'w49_vga', u'w50_coverage', u'w51_jumpers', u'w52_bases',\n",
       "       u'w53_sea', u'w54_pts', u'w55_behavior', u'w56_domi', u'w57_sabres',\n",
       "       u'w58_yzerman', u'w59_messier', u'w60_goalies', u'w61_hawks',\n",
       "       u'w62_our', u'w63_sx', u'w64_view', u'w65_hitters', u'w66_richard',\n",
       "       u'w67_point', u'w68_nyi', u'w69_mvp', u'w70_kill', u'w71_nl',\n",
       "       u'w72_field', u'w73_connector', u'w74_stars', u'w75_th', u'w76_install',\n",
       "       u'w77_traded', u'w78_configuration', u'w79_standard', u'w80_rotation',\n",
       "       u'w81_ultb', u'w82_sports', u'w83_pds', u'w84_canada', u'w85_did',\n",
       "       u'w86_clock', u'w87_first', u'w88_switch', u'w89_tonight',\n",
       "       u'w90_record', u'w91_singer', u'w92_majors', u'w93_royals', u'w94_does',\n",
       "       u'w95_flames', u'w96_of', u'w97_series', u'w98_plays', u'w99_det',\n",
       "       u'w100_pitched'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datasetA.columns[0:100]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ========== Question 1.7 --- [4 marks] ==========\n",
    "Familiarise yourself with the [`stripplot`](https://seaborn.github.io/generated/seaborn.stripplot.html?highlight=stripplot#seaborn.stripplot) function in `seaborn`. Pick one attribute of your choice (except `class`) and display a stripplot for that attribute for dataset A. Demonstrate the distribution of the data separately for each class (by making appropriate use of the `x` argument in `stripplot`). Set the `jitter` argument to `True` and the `alpha` argument to an appropriate value (to add transparency). When the jitter parameter is enabled a small amount of noise is added to the data so that there is less overlap and the distribution is easier to visualise."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f859e9f4a50>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f859e9f4350>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.stripplot(data=datasetA, x='class', y='w231_vram', jitter=True, alpha=.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ========== Question 1.8 --- [4 marks] ==========\n",
    "The stripplot illustrates the distribution of a single attribute. We can also visualise the joint distribution of two variables by using a scatter plot. Again, we want to add a bit of noise into the data so that is easier to see which parts of the space (2-dimensional in our case) have larger probability densities. \n",
    "\n",
    "For this, you will be using the function `scatter_jitter` provided below. This function takes as input two numpy arrays containing the features of interest. Pick two attributes of your choice from dataset A and use the provided function to plot their joint distribution. You can play around with the amount of noise added by tweaking the `jitter` parameter. Alternatively, you can just use its default value which is set to 0.2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def scatter_jitter(arr1, arr2, jitter=0.2):\n",
    "    \"\"\" Plots a joint scatter plot of two arrays by adding small noise to each example. \n",
    "    Noise is proportional to variance in each dimension. \"\"\"\n",
    "    arr1 = np.asarray(arr1)\n",
    "    arr2 = np.asarray(arr2)\n",
    "    arr1 = arr1 + jitter*arr1.std(axis=0)*np.random.standard_normal(arr1.shape)\n",
    "    arr2 = arr2 + jitter*arr2.std(axis=0)*np.random.standard_normal(arr2.shape)\n",
    "    plt.scatter(arr1, arr2, marker=4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0x7f859e67b8d0>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nsuRPmF5MHj+GGz9xNKce/uq6n1vAzZ88mtdNGFf3c5uZlTlB9EES/zr7zSz57HEcUcfaxP5jRvDq\n/cfU7XxmZtU4QaQwrX1vbvzE0cw/7TBGjcjuRzb1gFJS2LJ1h0dIm1nDOUGkJInjXt/Oyzv2nLjp\nbX9xIII9xie8tn1go7OfrFjFziOkzazRnCAGoDxOoudgte/MmcnKL72TR/75JL74nhmMG9lG+957\ncd0/voXbP30sR7/mgO5j28eNZN4pb2DcyOEM75FRPELazPLE3VwHYd2WrVx44wPc/fvNCLh73glM\n3Hd09+PlabjLvYwigmuXPsnli1dz8zlHc9C+o9nRtYun//QyF9xwP/c8vgUoNU6XfxtPfPVddXxH\nZtZK3M01Q/0NVuvZNVUSZ86cwl0XHs9BSSIZ0TaMyePH8P2PHcX80w+jfe+R/NWU/UvH4xHSZtZ4\nwxsdQFGVP/TP6JicejxCteMqX2f4MHXXNDzGwcwazQliiGr1QV5+nYEmHTOzrPhTKIecHMwsD/xJ\nZGZmVTlBmJlZVU4QZmZWlROEmZlVVeiBcpI2AWsbHUcPBwLPNjqIQSpy7FDs+IscOzj+RhpM7FMi\nor2/gwqdIPJI0rI0IxTzqMixQ7HjL3Ls4PgbKcvYfYnJzMyqcoIwM7OqnCBq78pGBzAERY4dih1/\nkWMHx99ImcXuNggzM6vKNQgzM6vKCaJGJJ0k6VFJqyVd1Oh4qpH075I2SlpRUTZe0u2SViW3+1c8\nNi95P49Kemdjou6OZbKkJZIekrRS0nlJeVHiHyVpqaT7k/i/mJQXIv4knjZJ90q6NblfpNifkPSg\npPskLUvKChG/pP0k3SDpEUkPS3pL3WKPCG9D3IA24PfAocBewP3AjEbHVSXOWcARwIqKsv8FXJTs\nXwR8LdmfkbyPkcC05P21NTD2icARyf444LEkxqLEL2DvZH8E0AkcVZT4k5g+A1wL3Fqkv50kpieA\nA3uUFSJ+YAFwdrK/F7BfvWJ3DaI2jgRWR8TjEbEduA44tcEx7SEi7gS29Cg+ldIfIMntaRXl10XE\ntohYA6ym9D4bIiI2RMTvkv0/Aw8DB1Oc+CMiXkjujki2oCDxS5oEvAu4uqK4ELH3IffxS9qX0he7\n7wBExPaI+CN1it0JojYOBtZV3F+flBXBhIjYkOw/DUxI9nP7niRNBd5M6Vt4YeJPLtHcB2wEbo+I\nIsV/KfA5YFdFWVFih1Iy/oWk5ZLmJmVFiH8asAn4j+Ty3tWSxlKn2J0grFuU6qi57tYmaW/gRuDT\nEfF85WN5jz8iuiLicGAScKSkw3o8nsv4Jb0b2BgRy3s7Jq+xVzgm+dmfDJwjaVblgzmOfzily8Lf\niog3Ay9SuqTULcvYnSBq4ylgcsX9SUlZETwjaSJAcrsxKc/de5I0glJyWBgRP0yKCxN/WXKJYAlw\nEsWI/2+A90h6gtLl0xMkXUMxYgcgIp5KbjcCN1G67FKE+NcD65PaJsANlBJGXWJ3gqiN3wLTJU2T\ntBcwG1jU4JjSWgTMSfbnALdUlM+WNFLSNGA6sLQB8QEgSZSuwz4cEd+oeKgo8bdL2i/ZHw28A3iE\nAsQfEfMiYlJETKX0t31HRHyQAsQOIGmspHHlfeBEYAUFiD8ingbWSXp9UvQ24CHqFXujWuabbQNO\nodSz5vfAxY2Op5cYvw9sAHZQ+mZyFnAAsBhYBfwCGF9x/MXJ+3kUOLnBsR9DqRr9AHBfsp1SoPjf\nBNybxL8C+HxSXoj4K2J6K6/0YipE7JR6F96fbCvL/58Fiv9wYFnyt3MzsH+9YvdIajMzq8qXmMzM\nrConCDMzq8oJwszMqnKCMDOzqpwgzMysKicIK4xkRs6pkn45iOe+kNy+WtINKY7/SXncQi1I+oik\nLyTbR2r1ugM4/+GSTqn3ea3YnCCsKUganua4iPhDRLw3xXGnRGnEc7M4nNK4EbPUnCCsSDYBXSQz\n0ibfyhdJuoPSoCEkXSDpt5IeKK+5UCmpgaxI9sdIul6lNSZuktQpqSN57AlJByb7n5G0Itk+XfE6\nD0u6SqX1HW5LRkgj6dzkNR+QdF1y6peAF5LtpSpxTUhiuD/Zju7n3JVrevwPSV9I9n8p6WsqrT3x\nmKRjk9H9XwL+XqX1EP5e0nHJ/n3JJHDjhvarsWaU6luXWR5ExF8nu39bUXwE8KaI2CLpREpTCxxJ\naf2FRZJmRWma82o+CTwXETOSifPu63mApL8CPgrMTF6zU9KvgOeSc70/Ij4m6Xrg74BrKE2mNi0i\ntpUvU0XED/p5e5cBv4qI0yW1AXv3c+6+DI+II5NLSv8zIt4u6fNAR0T8U/K+fgScExG/TiZAfLmf\n17QW5BqEFd3tEVFe4+LEZLsX+B3wBkof4r05htLkc0TECkpTGVQ75qaIeDFK6zn8EDg2eWxNRJST\nynJgarL/ALBQ0geBnSnfxwnAt5JYuiLiT/2cuy/liQwrY+rp18A3JJ0L7BcRaeO0FuIEYUX3YsW+\ngK9ExOFCx3LGAAABbUlEQVTJ9tqI+E6G595Wsd/FKzXydwH/Rql289u07SMDsJPd/3dH9RJXZUy7\niYivAmcDo4FfS3pDjWO0JuAEYc3k58A/JJdMkHSwpFf1cfyvgTOSY2cA/63KMXcBpyXtFWOB05Oy\nqiQNAyZHxBLgQmBfYO8UsS8GPpG8RptKK4n1du5ngFdJOkDSSODdKV7/z5SWai3H+ZqIeDAivkZp\nNmInCNuD2yCsaUTEbZL+AvhNaXZwXgA+yCtz5fd0BbBA0kOUpt5eCfypx2v+TtJ3eWXK5Ksj4l6V\nVrWrpg24JvmAF3BZyt5Q5wFXSjqL0jf/T0TEb6qdG0DSl5Lyp5LY+7MEuEilFe2+Ahwj6XhKK8St\nBH6a4jWsxXg2V2tZSWPwiIh4WdJrKE2b/PoorStu1vJcg7BWNgZYotJKdQI+6eRg9grXIMzMrCo3\nUpuZWVVOEGZmVpUThJmZVeUEYWZmVTlBmJlZVU4QZmZW1f8Hjg9xYsuE9j8AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f859ed09650>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "scatter_jitter(arr1=datasetA.w204_religions, arr2=datasetA.w160_muslims, jitter=0.3)\n",
    "plt.xlabel('\"religions\" counts')\n",
    "plt.ylabel('\"muslims\" counts')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ========== Question 1.9 --- [7 marks] ==========\n",
    "From the strip and scatter plots above you might observe that there is something peculiar about the data. Indeed most attributes take very small values (usually in the range 1-10) but there are some data points (i.e. rows) in the dataset where the attributes take very large values. These data points are called [outliers](https://en.wikipedia.org/wiki/Outlier).\n",
    "\n",
    "You might think that the presence of outliers in the dataset has been a resut of noise contamination (you wouldn't expect the same word to appear 600 times within an e-mail, would you?). Your job now is to create a new dataset from dataset A (name it `news_A_clean`) and remove the outliers. Create some metric to find the outliers and check that your metric is reasonable. Be careful not to alter the original `news_A`...we may require it in its dirty format later..."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I count the sum of the word counts for each dataset in order to find out outliers. This way all of the words together are taken into account, i.e. a lengthy but legal document can have more than 100 occurrences of a frequent word but still be a legal document.  \n",
    "A good way to spot outliers is by visualizing the data: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0x7f859dfcb110>"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f859e1d4190>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "countSums=np.sum(datasetA, axis=1)\n",
    "plt.scatter(x=np.arange(countSums.size),y=countSums)\n",
    "plt.xlabel('document number')\n",
    "plt.ylabel('word count sum')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The outliers are now obvious. I remove any datapoint with sum >= 150000.  \n",
    "The metric that I use to validate my claim that these are outliers is fitting a 1D gaussian to the sums and calculating the likelihood of seeing these sums in this this probability distribution. The likelihoods should be infinitesmall"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def gaussian1D(x,mean,std):\n",
    "    return np.exp(-np.power(x - mean, 2.) / (2 * np.power(std, 2.)))/(std*np.sqrt(2*np.pi))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean of sum of counts of the words:  3199.96242367\n",
      "Standard deviation of sum of counts of the words:  21319.4499751\n",
      "probability of any document with count sum >= 150000 to be a valid part of the dataset:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>123</th>\n",
       "      <th>159</th>\n",
       "      <th>196</th>\n",
       "      <th>222</th>\n",
       "      <th>242</th>\n",
       "      <th>476</th>\n",
       "      <th>539</th>\n",
       "      <th>559</th>\n",
       "      <th>576</th>\n",
       "      <th>594</th>\n",
       "      <th>...</th>\n",
       "      <th>1433</th>\n",
       "      <th>1531</th>\n",
       "      <th>1763</th>\n",
       "      <th>1908</th>\n",
       "      <th>2040</th>\n",
       "      <th>2081</th>\n",
       "      <th>2134</th>\n",
       "      <th>2185</th>\n",
       "      <th>2200</th>\n",
       "      <th>2248</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>likelihood</th>\n",
       "      <td>5.710292e-21</td>\n",
       "      <td>1.794862e-20</td>\n",
       "      <td>5.567190e-21</td>\n",
       "      <td>7.321611e-21</td>\n",
       "      <td>3.956435e-20</td>\n",
       "      <td>5.258013e-21</td>\n",
       "      <td>3.225363e-21</td>\n",
       "      <td>2.596395e-20</td>\n",
       "      <td>8.294344e-21</td>\n",
       "      <td>7.826941e-21</td>\n",
       "      <td>...</td>\n",
       "      <td>2.659561e-21</td>\n",
       "      <td>2.978748e-19</td>\n",
       "      <td>8.688114e-20</td>\n",
       "      <td>1.087436e-20</td>\n",
       "      <td>9.153565e-20</td>\n",
       "      <td>1.009968e-20</td>\n",
       "      <td>1.983982e-20</td>\n",
       "      <td>7.555928e-20</td>\n",
       "      <td>4.571732e-21</td>\n",
       "      <td>4.542731e-21</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows × 30 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                    123           159           196           222   \\\n",
       "likelihood  5.710292e-21  1.794862e-20  5.567190e-21  7.321611e-21   \n",
       "\n",
       "                    242           476           539           559   \\\n",
       "likelihood  3.956435e-20  5.258013e-21  3.225363e-21  2.596395e-20   \n",
       "\n",
       "                    576           594       ...               1433  \\\n",
       "likelihood  8.294344e-21  7.826941e-21      ...       2.659561e-21   \n",
       "\n",
       "                    1531          1763          1908          2040  \\\n",
       "likelihood  2.978748e-19  8.688114e-20  1.087436e-20  9.153565e-20   \n",
       "\n",
       "                    2081          2134          2185          2200  \\\n",
       "likelihood  1.009968e-20  1.983982e-20  7.555928e-20  4.571732e-21   \n",
       "\n",
       "                    2248  \n",
       "likelihood  4.542731e-21  \n",
       "\n",
       "[1 rows x 30 columns]"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "news_A_clean=pd.DataFrame(datasetA[countSums<150000])\n",
    "outliers = pd.DataFrame(datasetA[countSums >= 150000])\n",
    "\n",
    "likelihoods=pd.DataFrame(gaussian1D(x=np.sum(outliers, axis=1), mean=countSums.mean(), std=countSums.std()))\n",
    "likelihoods.columns=['likelihood']\n",
    "print('Mean of sum of counts of the words: ', countSums.mean())\n",
    "print('Standard deviation of sum of counts of the words: ', countSums.std())\n",
    "print('probability of any document with count sum >= 150000 to be a valid part of the dataset:')\n",
    "likelihoods.T"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Additionally, note that the mean of the distribution is 3200 and the standard deviation is 21319. These data points lie more than 6 standard deviations away from the mean, which makes their likelihood less than 1 over 5 million according to the rules of normally distributed data, i.e. almost cetrainly they are invalid data points."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And now if we replot the word sum counts of the clean dataset, it should look more reasonably distributed:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "109.55958007520974"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nzMyssP8P7EpQntpgVyYAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f85997d10d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "countSumsClean=np.sum(news_A_clean, axis=1)\n",
    "plt.scatter(x=np.arange(countSumsClean.size),y=countSumsClean)\n",
    "plt.xlabel('document number')\n",
    "plt.ylabel('word count sum')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are still some data points that can be considered outliers but I wouldn't be surprised for a document to include e.g. 3000 words so, in my opinion, we can't be certain if these are actually erroneous and should remain."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ========== Question 1.10 --- [3 marks] ==========\n",
    "Write code to return the number of data points in the clean dataset, and the number of documents that have been excluded as outliers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# outliers:  30\n",
      "Size of clean dataset:  2099\n"
     ]
    }
   ],
   "source": [
    "print('# outliers: ',outliers.shape[0])\n",
    "print('Size of clean dataset: ',news_A_clean.shape[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Naive Bayes classification [60%]\n",
    "Now we want to fit a Gaussian Naive Bayes model to the cleaned dataset A. You might want first to familiarise yourself with the [`GaussianNB`](http://scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.GaussianNB.html) class in `Sklearn`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ========== Question 2.1 --- [4 marks] ==========\n",
    "\n",
    "By using the `scatter_jitter` function provided above, display a scatter plot of the features `w281_ico` and `w273_tek` for the cleaned dataset A. Set the jitter value to something small (e.g. 0.1). Label axes appropriately."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0x7f23043797d0>"
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\ngpmZpf4/HTPDtfGu4IYAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f234a923550>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "scatter_jitter(arr1= news_A_clean.w281_ico, arr2= news_A_clean.w273_tek,jitter=0.1)\n",
    "plt.xlabel('word ico count')\n",
    "plt.ylabel('word tek count')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ========== Question 2.2 --- [6 marks] ==========\n",
    "What do you observe? \n",
    "\n",
    "How does that relate to the Naive Bayes assumption? \n",
    "\n",
    "What would be the main issue we would have to face if we didn't make this assumption?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I observe that there's a positive correlation between the two features, i.e. documents with high frequency of the word 'ico' have a high frequency of the word 'tek' too and documents with low frequency of the word 'ico' have a low frequency of the word 'tek' too.\n",
    "\n",
    "The naive bayes assumption says that features are conditionally independent, given the class. That is, we naively assume that the covariance we see between these 2 features is not caused because these 2 attributes are dependent or related but because each of the 5 classes affects the frequency of one word exactly the same way as it affects the other (which is quite unlikely). \n",
    "\n",
    "We make this assumption because of the problem known as curse of dimensionality. We have 520 features, so normally we would have to estimate a 520 X 520 full covariance matrix (~270,400 parameters) in order to create a multivariate Gaussian. However, we only have 2129 samples and so the resulting matrix would be dominated by the noise in the data set, i.e. it wouldn't be representative of the real world. We would need a massive amount of samples in order to estimate an accurate full covariance matrix. For example, even if we were only counting presence / absence of a word (and not frequency, which makes the sample space infinite), there would be 2^520 unique samples, i.e. it would be impossible to gather and process all these data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ========== Question 2.3 --- [5 marks] ==========\n",
    "Fit a Gaussian Naive Bayes model to the cleaned dataset A. Your input features should be all the attributes in the dataset except the `class` attribute which will be your target. Display the classification accuracy on the training dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "X=news_A_clean.drop('class', axis=1)\n",
    "y=pd.Series(news_A_clean['class'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GaussianNB(priors=None)"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.naive_bayes import GaussianNB\n",
    "clf=GaussianNB()\n",
    "clf.fit(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy percentage on the training data without outliers:  0.878037160553\n"
     ]
    }
   ],
   "source": [
    "print('Accuracy percentage on the training data without outliers: ',clf.score(X=X,y=y))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ========== Question 2.4 --- [5 marks] ==========\n",
    "Plot the (normalised) confusion matrix for the training data. Label axes appropriately."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def plot_confusion_matrix(cm, classes, title='Newsgroup classification confusion matrix'):\n",
    "    \"\"\"Plots a confusion matrix.\"\"\"\n",
    "    sns.heatmap(cm, xticklabels=classes, yticklabels=classes, vmin=0., vmax=1., annot=True)\n",
    "    plt.title(title)\n",
    "    plt.ylabel('True label')\n",
    "    plt.xlabel('Predicted label')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f859963a250>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm=sklearn.metrics.confusion_matrix(y_true=y, y_pred=clf.predict(X))\n",
    "normcm=cm/cm.sum(axis=1)[:,np.newaxis]\n",
    "plot_confusion_matrix(normcm,classes=['atheism','ibm','mac','baseball','hockey'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ========== Question 2.5 --- [3 marks] ==========\n",
    "\n",
    "Comment on the confusion matrix from the previous question. Does it look like what you would have expected? Explain."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Yes, it looks as I would pretty much expect it to be.  \n",
    "Class 1, which is dissimilar to any other class, had a very high percentage of correct classifications (96%), as expected.  \n",
    "Class 2 and 3, that are very similar among them (both represent pc hardware) but dissimilar to any other class, had misclassifications among them but not between any other class. 35% of class 2 is classified as class 3 because class 3 is the class with the highest prior and due to their similarity, it overwhelms class 2.  \n",
    "Class 4 and 5 are very similar among them (both represent sports) too. Class 5 had the biggest part of misclassifications to class 4, as expected. I would expect to see misclassifications of true class 4 to predicted class 5 though, because of their similarity."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ========== Question 2.6 --- [5 marks] ==========\n",
    "Fit a Gaussian Naive Bayes model to the original dataset A (including the outliers). Display the classification accuracy on the training dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "XOriginal=datasetA.drop('class', axis=1)\n",
    "yOriginal=pd.Series(datasetA['class'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GaussianNB(priors=None)"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clfOriginal=GaussianNB()\n",
    "clfOriginal.fit(XOriginal, yOriginal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy percentage on the training data with outliers:  0.205260685768\n"
     ]
    }
   ],
   "source": [
    "print('Accuracy percentage on the training data with outliers: ',clfOriginal.score(X=XOriginal,y=yOriginal))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ========== Question 2.7 --- [4 marks] ==========\n",
    "Comment on the above results (Questions 2.3 & 2.6). In particular explain why you think that cleaning the data helps in this case."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Gaussian naive bayes fits a gaussian for each attribute for each class, in order to calculate p(x|y).  \n",
    "The majority of the regular values are less than 10, but there are some outliers with counts of 500 and higher. These outliers distort the mean and standard deviation calculation: the mean of the gaussian becomes the middle value of the outliers and the regular values, somewhere that it doesn't represent regular nor outlier values and the standard deviation is increased by a lot, even if for majority of values are close to each other. Hence, the model is not representative of the class and it is overwhelmed by noise, resulting in bad performance even for the training set.  \n",
    "Removing the outliers allows us to capture a realistic approximation of the mean and the std deviation and hence accuracy increases."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ========== Question 2.8 --- [5 marks] ==========\n",
    "\n",
    "Now we want to evaluate the generalisation of the classifier on new (i.e. unseen data). Use the classifier you trained in Question 2.5 (i.e. on the cleaned dataset) and test its performance on dataset `train_20news_partB`. \n",
    "\n",
    "Display the (normalized) confusion matrix and the classification accuracy on the Dataset B."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy percentage on the test data:  0.8203125\n"
     ]
    }
   ],
   "source": [
    "predictionsB=clf.predict(datasetB.drop('class',axis=1))\n",
    "yB=datasetB['class']\n",
    "print('Accuracy percentage on the test data: ',clf.score(X=datasetB.drop('class',axis=1),y=yB))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f8599630c50>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cmB=sklearn.metrics.confusion_matrix(y_true=yB, y_pred=predictionsB)\n",
    "cmBNorm = cmB / cmB.sum(axis=1)[:,np.newaxis]\n",
    "plot_confusion_matrix(cmBNorm,classes=['atheism','ibm','mac','baseball','hockey'], title=\"Newsgroup test data classification\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ========== Question 2.9 --- [4 marks] ==========\n",
    "\n",
    "Comment on the results from the previous question. Do you think this is an acceptable level of performance? Which are the easiest and most difficult classes to predict correctly? "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I think this is a generally acceptable level of performance for all classes apart from class 2(ibm).  \n",
    "The easiest classs to predict is class 'atheism' with 95% accuracy. This was expected because it's very dissimilar to any other class.  \n",
    "The most difficult class to predict is class 2 (ibm), which only has 59% accuracy. This was expected too because of its similarity with class 3 (mac) and due to the fact that class 3 is the most likely class, which overwhelms class 2."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ========== Question 2.10 --- [4 marks] ==========\n",
    "What is a reasonable baseline against which to compare the classiffication performance? *Hint: What is the simplest classiffier you can think of and what would its performance be on this dataset?* "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I would classify everything as a member of the most likely class. To do this, I calculate the prior probabilities of each class from the training set and then pick the most likely class. Whenever asked to predict the class of a sample, return the label of that class.  \n",
    "It's reasonable because the most likely class in the training dataset has more than 20% frequency (5 classes), specifically 21% (class 3). The accuracy then, on the training dataset, will be equal to the frequency since I am classifying only 21% of the data correctly. Assuming the training data is reasonably unbiased, the frequency of class 3 should be close to that number in any set of unseen data and hence the generalization error should be around there too."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ========== Question 2.11 --- [4 marks] ==========\n",
    "\n",
    "Estimate the baseline performance."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The baseline performance on the training dataset is exactly equal to the frequency percentage of the most likely class, i.e. 21.29%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy on test data is  0.171875\n"
     ]
    }
   ],
   "source": [
    "maxPrior=clf.class_prior_.argmax()\n",
    "ySize=datasetB.shape[0]\n",
    "predictions=np.empty(ySize)\n",
    "predictions.fill(maxPrior)\n",
    "print('Accuracy on test data is ',sklearn.metrics.accuracy_score(y_true=datasetB['class'],y_pred=predictions))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ========== Question 2.12 --- [3 marks] ==========\n",
    "\n",
    "Execute the cell below to get the prediction on the test dataset by using a different classifier which we will be introducing in this class later on. By using this prediction provided below (`rf_prediction`) plot the confusion matrix and display the classification accuracy on the test dataset. *Important: Make sure the test dataset is loaded in a DataFrame called `news_B` otherwise execution will return an error. In that case replace the DataFrame name in the third line.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "rf = RandomForestClassifier(n_estimators = 50).fit(X=news_A_clean.drop(\"class\", axis=1), y=news_A_clean[\"class\"])\n",
    "X_ts = datasetB.drop('class', axis=1)\n",
    "rf_prediction = rf.predict(X=X_ts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\noq34rHkYNnEAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f8597848590>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cmRF=sklearn.metrics.confusion_matrix(y_true=datasetB['class'], y_pred=rf_prediction)\n",
    "cmRFNorm = cmRF / cmRF.sum(axis=1)[:,np.newaxis]\n",
    "plot_confusion_matrix(cmRFNorm,classes=['atheism','ibm','mac','baseball','hockey'], title=\"Newsgroup test data RF classification\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy percentage on the test data:  0.8671875\n"
     ]
    }
   ],
   "source": [
    "print('Accuracy percentage on the test data: ',rf.score(X=X_ts,y=datasetB['class']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ========== Question 2.13 --- [8 marks] ==========\n",
    "\n",
    "Which classifier (Naive Bayes or Random Forest) would you trust if you had to choose? What are the reasons you believe the Gaussian Naive Bayes classifier does not perofm so well in this particular problem? You are not expected to justify the performance level achieved by the Random Forest classifier. Feel free to use code and plots to illustrate your points."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I would trust Random forest more, since it has a higher accuracy rate on unseen data and hence lower generalization error.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "One of the reasons that NB doesn't perform so well is the NB assumption of conditional independence between the features. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
